package com.sinothk.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sinothk.openfire.android.demo.model.bean.LastMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAST_MESSAGE".
*/
public class LastMessageDao extends AbstractDao<LastMessage, Long> {

    public static final String TABLENAME = "LAST_MESSAGE";

    /**
     * Properties of entity LastMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Key = new Property(0, Long.class, "key", true, "_id");
        public final static Property Jid = new Property(1, String.class, "jid", false, "JID");
        public final static Property ChatType = new Property(2, int.class, "chatType", false, "CHAT_TYPE");
        public final static Property From = new Property(3, String.class, "from", false, "FROM");
        public final static Property FromName = new Property(4, String.class, "fromName", false, "FROM_NAME");
        public final static Property FromAvatar = new Property(5, String.class, "fromAvatar", false, "FROM_AVATAR");
        public final static Property FromType = new Property(6, String.class, "fromType", false, "FROM_TYPE");
        public final static Property To = new Property(7, String.class, "to", false, "TO");
        public final static Property ToName = new Property(8, String.class, "toName", false, "TO_NAME");
        public final static Property ToAvatar = new Property(9, String.class, "toAvatar", false, "TO_AVATAR");
        public final static Property ContentType = new Property(10, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property MsgTxt = new Property(11, String.class, "msgTxt", false, "MSG_TXT");
        public final static Property MsgImg = new Property(12, String.class, "msgImg", false, "MSG_IMG");
        public final static Property MsgLoc = new Property(13, String.class, "msgLoc", false, "MSG_LOC");
        public final static Property ReceiveTime = new Property(14, long.class, "receiveTime", false, "RECEIVE_TIME");
        public final static Property SendTime = new Property(15, long.class, "sendTime", false, "SEND_TIME");
    }


    public LastMessageDao(DaoConfig config) {
        super(config);
    }
    
    public LastMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAST_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: key
                "\"JID\" TEXT UNIQUE ," + // 1: jid
                "\"CHAT_TYPE\" INTEGER NOT NULL ," + // 2: chatType
                "\"FROM\" TEXT," + // 3: from
                "\"FROM_NAME\" TEXT," + // 4: fromName
                "\"FROM_AVATAR\" TEXT," + // 5: fromAvatar
                "\"FROM_TYPE\" TEXT," + // 6: fromType
                "\"TO\" TEXT," + // 7: to
                "\"TO_NAME\" TEXT," + // 8: toName
                "\"TO_AVATAR\" TEXT," + // 9: toAvatar
                "\"CONTENT_TYPE\" TEXT," + // 10: contentType
                "\"MSG_TXT\" TEXT," + // 11: msgTxt
                "\"MSG_IMG\" TEXT," + // 12: msgImg
                "\"MSG_LOC\" TEXT," + // 13: msgLoc
                "\"RECEIVE_TIME\" INTEGER NOT NULL ," + // 14: receiveTime
                "\"SEND_TIME\" INTEGER NOT NULL );"); // 15: sendTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAST_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LastMessage entity) {
        stmt.clearBindings();
 
        Long key = entity.getKey();
        if (key != null) {
            stmt.bindLong(1, key);
        }
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(2, jid);
        }
        stmt.bindLong(3, entity.getChatType());
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(4, from);
        }
 
        String fromName = entity.getFromName();
        if (fromName != null) {
            stmt.bindString(5, fromName);
        }
 
        String fromAvatar = entity.getFromAvatar();
        if (fromAvatar != null) {
            stmt.bindString(6, fromAvatar);
        }
 
        String fromType = entity.getFromType();
        if (fromType != null) {
            stmt.bindString(7, fromType);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(8, to);
        }
 
        String toName = entity.getToName();
        if (toName != null) {
            stmt.bindString(9, toName);
        }
 
        String toAvatar = entity.getToAvatar();
        if (toAvatar != null) {
            stmt.bindString(10, toAvatar);
        }
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(11, contentType);
        }
 
        String msgTxt = entity.getMsgTxt();
        if (msgTxt != null) {
            stmt.bindString(12, msgTxt);
        }
 
        String msgImg = entity.getMsgImg();
        if (msgImg != null) {
            stmt.bindString(13, msgImg);
        }
 
        String msgLoc = entity.getMsgLoc();
        if (msgLoc != null) {
            stmt.bindString(14, msgLoc);
        }
        stmt.bindLong(15, entity.getReceiveTime());
        stmt.bindLong(16, entity.getSendTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LastMessage entity) {
        stmt.clearBindings();
 
        Long key = entity.getKey();
        if (key != null) {
            stmt.bindLong(1, key);
        }
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(2, jid);
        }
        stmt.bindLong(3, entity.getChatType());
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(4, from);
        }
 
        String fromName = entity.getFromName();
        if (fromName != null) {
            stmt.bindString(5, fromName);
        }
 
        String fromAvatar = entity.getFromAvatar();
        if (fromAvatar != null) {
            stmt.bindString(6, fromAvatar);
        }
 
        String fromType = entity.getFromType();
        if (fromType != null) {
            stmt.bindString(7, fromType);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(8, to);
        }
 
        String toName = entity.getToName();
        if (toName != null) {
            stmt.bindString(9, toName);
        }
 
        String toAvatar = entity.getToAvatar();
        if (toAvatar != null) {
            stmt.bindString(10, toAvatar);
        }
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(11, contentType);
        }
 
        String msgTxt = entity.getMsgTxt();
        if (msgTxt != null) {
            stmt.bindString(12, msgTxt);
        }
 
        String msgImg = entity.getMsgImg();
        if (msgImg != null) {
            stmt.bindString(13, msgImg);
        }
 
        String msgLoc = entity.getMsgLoc();
        if (msgLoc != null) {
            stmt.bindString(14, msgLoc);
        }
        stmt.bindLong(15, entity.getReceiveTime());
        stmt.bindLong(16, entity.getSendTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LastMessage readEntity(Cursor cursor, int offset) {
        LastMessage entity = new LastMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // key
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jid
            cursor.getInt(offset + 2), // chatType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // from
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fromName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fromAvatar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fromType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // to
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // toName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // toAvatar
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // contentType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // msgTxt
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // msgImg
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // msgLoc
            cursor.getLong(offset + 14), // receiveTime
            cursor.getLong(offset + 15) // sendTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LastMessage entity, int offset) {
        entity.setKey(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChatType(cursor.getInt(offset + 2));
        entity.setFrom(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFromName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFromAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFromType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setToName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setToAvatar(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setContentType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMsgTxt(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMsgImg(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMsgLoc(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setReceiveTime(cursor.getLong(offset + 14));
        entity.setSendTime(cursor.getLong(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LastMessage entity, long rowId) {
        entity.setKey(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LastMessage entity) {
        if(entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LastMessage entity) {
        return entity.getKey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
